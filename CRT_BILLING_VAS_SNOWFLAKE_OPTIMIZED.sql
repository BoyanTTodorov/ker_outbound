CREATE OR REPLACE VIEW MODELS.KERING_GLOBE.CRT_BILLING_VAS (
    VERSION, QUANTITY_PRE, QUANTITY_FIX, ACTIVITY_DATE, PREPARATION_CHILD, PREPARATION_MOTHER, 
    SAP_ORDERID, VAS_CLUSTER, BRAND, OWNER, GRADE,
    P1CDPO, P1CACT, P1NANP, P1NPRE, VAS_CODE, UPDATED_TS
) AS
WITH
/*-----------------------------------------------------------------------
RANGE_PARAMS
- Set APPLY_RANGE = TRUE  → view returns only rows in [START_TS, END_TS)
- Set APPLY_RANGE = FALSE → view returns all rows
-----------------------------------------------------------------------*/
RANGE_PARAMS AS (
  SELECT
    TRUE AS APPLY_RANGE,  -- flip to FALSE to load ALL data
    TO_TIMESTAMP_NTZ('2025-08-01 00:00:00') AS START_TS,
    TO_TIMESTAMP_NTZ('2025-08-31 23:59:59') AS END_TS
),

/*-----------------------------------------------------------------------
PREPLINES
- Aggregates positive picked quantities per prep line.
- Join to shipments to allow both drivers to limit by range.
-----------------------------------------------------------------------*/
PREPLINES AS (
  SELECT
    P1.P1CDPO, P1.P1CACT, P1.P1NANP, P1.P1NPRE, P1.P1CART, P1.P1CPRP, P1.P1CQAL,
    SUM(P1.P1QPRE) AS P1QPRE,
    MAX(P1.HVR_CHANGE_TIME)   AS P1_LASTUPDATE,
    MAX(SH.HVR_CHANGE_TIME)   AS SH_LASTUPDATE
  FROM MODELS.KERING_GLOBE.HLPRPLP P1
  JOIN MODELS.KERING_GLOBE.KBSHIPP SH
    ON SH.SHCDEP = P1.P1CDPO AND SH.SHCACT = P1.P1CACT
   AND SH.SHNANN = P1.P1NANP AND SH.SHNPRP = P1.P1NPRE
  WHERE P1.P1QPRE > 0
    AND (
      (SELECT APPLY_RANGE FROM RANGE_PARAMS) = FALSE
      OR (
           /* either table being in-range is enough to keep the row */
           (P1.HVR_CHANGE_TIME >= (SELECT START_TS FROM RANGE_PARAMS)
        AND P1.HVR_CHANGE_TIME <  (SELECT END_TS   FROM RANGE_PARAMS))
        OR (SH.HVR_CHANGE_TIME >= (SELECT START_TS FROM RANGE_PARAMS)
        AND SH.HVR_CHANGE_TIME <  (SELECT END_TS   FROM RANGE_PARAMS))
      )
    )
  GROUP BY P1.P1CDPO, P1.P1CACT, P1.P1NANP, P1.P1NPRE, P1.P1CART, P1.P1CPRP, P1.P1CQAL
),

/*-----------------------------------------------------------------------
VASLINE
- Extracts VAS codes per prep line from KBMCDLP (CLVA01..CLVA25) for
  the correct order (child vs mother) using KBSPLIP.
- UNPIVOT to a row-per-VAS code; derive VAS_CLUSTER via KBTVASP.
-----------------------------------------------------------------------*/
VASLINE AS (
  SELECT
    S.P1CDPO, S.P1CACT, S.P1NANP, S.P1NPRE,
    S.CLCART, S.CLRCDE, S.CLNANP, S.CLNPRE,
    U.VAS_CODE,
    /* Keep qty at this stage for later capped aggregation */
    S.CLQPPP AS QTY_VAS_LANCIATA,
    S.PREPA_TYPE,
    KBTV.VTCTVA AS MAP_VAS_CODE,
    /* VAS_CLUSTER = text after '#' in VTDVAS, ')' stripped */
    REPLACE(SPLIT_PART(KBTV.VTDVAS, '#', 2), ')', '') AS VAS_CLUSTER,
    /* track change time from CL (KBMCDLP) as driver for this branch */
    S.CL_LASTUPDATE
  FROM (
    SELECT
      P1.P1CDPO, P1.P1CACT, P1.P1NANP, P1.P1NPRE,
      CL.CLCART, CL.CLRCDE, CL.CLNANP, CL.CLNPRE,
      CL.CLQPPP,
      /* choose child vs mother shipment to bind CL correctly */
      CASE WHEN KP_CHILD.KPRODP IS NULL THEN 'MOTHER' ELSE 'CHILD' END AS PREPA_TYPE,
      /* pull a single non-null VAS column per row via UNPIVOT next */
      CL.CLVA01, CL.CLVA02, CL.CLVA03, CL.CLVA04, CL.CLVA05,
      CL.CLVA06, CL.CLVA07, CL.CLVA08, CL.CLVA09, CL.CLVA10,
      CL.CLVA11, CL.CLVA12, CL.CLVA13, CL.CLVA14, CL.CLVA15,
      CL.CLVA16, CL.CLVA17, CL.CLVA18, CL.CLVA19, CL.CLVA20,
      CL.CLVA21, CL.CLVA22, CL.CLVA23, CL.CLVA24, CL.CLVA25,
      /* last update on CL row */
      COALESCE(CL.HVR_CHANGE_TIME, TO_TIMESTAMP_NTZ('1900-01-01 00:00:01')) AS CL_LASTUPDATE
    FROM PREPLINES P1
    /* resolve child prep → order codes */
    LEFT JOIN (
      SELECT KPCDEP, KPCACT, KPRODP, KPNAOR, KPNPOR, KPNACR, KPNPCR
      FROM MODELS.KERING_GLOBE.KBSPLIP
      GROUP BY KPCDEP, KPCACT, KPRODP, KPNAOR, KPNPOR, KPNACR, KPNPCR
    ) KP_CHILD
      ON KP_CHILD.KPCDEP = P1.P1CDPO AND KP_CHILD.KPCACT = P1.P1CACT
     AND KP_CHILD.KPNACR = P1.P1NANP AND KP_CHILD.KPNPCR = P1.P1NPRE
    /* resolve mother prep → order codes */
    LEFT JOIN (
      SELECT KPCDEP, KPCACT, KPRODP, KPNAOR, KPNPOR
      FROM MODELS.KERING_GLOBE.KBSPLIP
      GROUP BY KPCDEP, KPCACT, KPRODP, KPNAOR, KPNPOR
    ) KP_MOTHER
      ON KP_MOTHER.KPCDEP = P1.P1CDPO AND KP_MOTHER.KPCACT = P1.P1CACT
     AND KP_MOTHER.KPNAOR = P1.P1NANP AND KP_MOTHER.KPNPOR = P1.P1NPRE
    /* CL lines for that (order, prep, sku) */
    LEFT JOIN (
      SELECT
        CLCDPO, CLCACT, CLRCDE, CLNANP, CLNPRE, CLNLPR, CLCART,
        SUM(CLQPPP) CLQPPP,
        CLVA01, CLVA02, CLVA03, CLVA04, CLVA05,
        CLVA06, CLVA07, CLVA08, CLVA09, CLVA10,
        CLVA11, CLVA12, CLVA13, CLVA14, CLVA15,
        CLVA16, CLVA17, CLVA18, CLVA19, CLVA20,
        CLVA21, CLVA22, CLVA23, CLVA24, CLVA25,
        MAX(HVR_CHANGE_TIME) AS HVR_CHANGE_TIME
      FROM MODELS.KERING_GLOBE.KBMCDLP
      WHERE CLSLAN <> ' '
      GROUP BY
        CLCDPO, CLCACT, CLRCDE, CLNANP, CLNPRE, CLNLPR, CLCART,
        CLVA01, CLVA02, CLVA03, CLVA04, CLVA05,
        CLVA06, CLVA07, CLVA08, CLVA09, CLVA10,
        CLVA11, CLVA12, CLVA13, CLVA14, CLVA15,
        CLVA16, CLVA17, CLVA18, CLVA19, CLVA20,
        CLVA21, CLVA22, CLVA23, CLVA24, CLVA25
    ) CL
      ON CL.CLCACT = P1.P1CACT
     AND CL.CLCDPO = P1.P1CDPO
     AND CL.CLCART = P1.P1CART
     AND CL.CLRCDE = COALESCE(KP_CHILD.KPRODP, KP_MOTHER.KPRODP)
     AND CL.CLNANP = COALESCE(KP_CHILD.KPNAOR, KP_MOTHER.KPNAOR)
     AND CL.CLNPRE = COALESCE(KP_CHILD.KPNPOR, KP_MOTHER.KPNPOR)
    WHERE
      /* optional pushdown range on CL values; PREPLINES already ranged */
      (
        (SELECT APPLY_RANGE FROM RANGE_PARAMS) = FALSE
        OR (
             CL.HVR_CHANGE_TIME >= (SELECT START_TS FROM RANGE_PARAMS)
         AND CL.HVR_CHANGE_TIME  < (SELECT END_TS   FROM RANGE_PARAMS)
        )
      )
  ) S
  /* Snowflake UNPIVOT to one VAS per row */
  UNPIVOT (VAS_CODE FOR POSITION IN (
    CLVA01, CLVA02, CLVA03, CLVA04, CLVA05,
    CLVA06, CLVA07, CLVA08, CLVA09, CLVA10,
    CLVA11, CLVA12, CLVA13, CLVA14, CLVA15,
    CLVA16, CLVA17, CLVA18, CLVA19, CLVA20,
    CLVA21, CLVA22, CLVA23, CLVA24, CLVA25
  )) AS U
  LEFT JOIN MODELS.KERING_GLOBE.KBTVASP KBTV
    ON TRIM(SUBSTR(U.VAS_CODE, 1, 7)) = TRIM(KBTV.VTCTVA)
  /* keep only non-empty codes */
  WHERE U.VAS_CODE IS NOT NULL
),

/*-----------------------------------------------------------------------
VASCODE
- Finalized VAS facts per prep with quantities & cluster, aggregated.
-----------------------------------------------------------------------*/
VASCODE AS (
  SELECT
    V.P1CDPO, V.P1CACT, V.P1NANP, V.P1NPRE,
    V.CLCART, V.CLRCDE, V.CLNANP, V.CLNPRE,
    TRIM(SUBSTR(V.VAS_CODE, 1, 7)) AS VAS_CODE,
    SUM(V.QTY_VAS_LANCIATA)        AS QTY_VAS_LANCIATA,
    ANY_VALUE(V.PREPA_TYPE)        AS PREPA_TYPE,
    MAX(V.VAS_CLUSTER)             AS VAS_CLUSTER,
    MAX(V.CL_LASTUPDATE)           AS LASTUPDATE   -- for UPDATED_TS greatest()
  FROM VASLINE V
  WHERE TRIM(SUBSTR(V.VAS_CODE, 1, 7)) IS NOT NULL
  GROUP BY
    V.P1CDPO, V.P1CACT, V.P1NANP, V.P1NPRE, V.CLCART, V.CLRCDE, V.CLNANP, V.CLNPRE, TRIM(SUBSTR(V.VAS_CODE,1,7))
),

/*-----------------------------------------------------------------------
BILLING_VAS_BASE
- Join pieces and compute QUANTITY_PRE / capped QUANTITY_FIX per VAS.
- Compute UPDATED_TS as greatest of shipment/prep/CL changes.
-----------------------------------------------------------------------*/
BILLING_VAS_BASE AS (
  SELECT
    '1.0' AS VERSION,
    SUM(P1.P1QPRE) AS QUANTITY_PRE,
    SUM(LEAST(VS.QTY_VAS_LANCIATA, P1.P1QPRE)) AS QUANTITY_FIX,
    TRUNC(SH.SHDTKP) AS ACTIVITY_DATE,

    COALESCE(LPAD(P1.P1NANP::VARCHAR, 2, '0') || '/' || LPAD(P1.P1NPRE::VARCHAR, 9, '0'), ' ') AS PREPARATION_CHILD,
    COALESCE(LPAD(VS.CLNANP::VARCHAR, 2, '0') || '/' || LPAD(VS.CLNPRE::VARCHAR, 9, '0'), ' ') AS PREPARATION_MOTHER,

    VS.CLRCDE AS SAP_ORDERID,
    VS.VAS_CLUSTER,

    CASE 
      WHEN CA.CABRDC = '12' THEN 'GG'
      WHEN CA.CABRDC = '13' THEN 'BV'
      WHEN CA.CABRDC = '18' THEN 'BAL'
      WHEN CA.CABRDC = '14' THEN 'YSL'
      WHEN CA.CABRDC = '15' THEN 'AMQ' 
      ELSE TO_CHAR(CA.CABRDC)
    END AS BRAND,

    COALESCE(P1.P1CPRP, ' ') AS OWNER,
    COALESCE(P1.P1CQAL, ' ') AS GRADE,

    P1.P1CDPO, P1.P1CACT, P1.P1NANP, P1.P1NPRE,
    VS.VAS_CODE,

    /* UPDATED_TS driven by greatest of shipment, prep, and VASline */
    MAX(GREATEST(
      COALESCE(SH.HVR_CHANGE_TIME, TO_TIMESTAMP_NTZ('1900-01-01 00:00:01')),
      COALESCE(P1.P1_LASTUPDATE,   TO_TIMESTAMP_NTZ('1900-01-01 00:00:01')),
      COALESCE(VS.LASTUPDATE,      TO_TIMESTAMP_NTZ('1900-01-01 00:00:01'))
    )) AS UPDATED_TS

  FROM PREPLINES P1
  JOIN VASCODE VS
    ON P1.P1CDPO = VS.P1CDPO AND P1.P1CACT = VS.P1CACT
   AND P1.P1NANP = VS.P1NANP AND P1.P1NPRE = VS.P1NPRE
   AND P1.P1CART = VS.CLCART
  JOIN MODELS.KERING_GLOBE.KBSHIPP SH
    ON SH.SHCDEP = P1.P1CDPO AND SH.SHCACT = P1.P1CACT
   AND SH.SHNANN = P1.P1NANP AND SH.SHNPRP = P1.P1NPRE
  JOIN MODELS.KERING_GLOBE.HLPRENP PE
    ON PE.PECDPO = P1.P1CDPO AND PE.PECACT = P1.P1CACT
   AND PE.PENANN = P1.P1NANP AND PE.PENPRE = P1.P1NPRE
  LEFT JOIN MODELS.KERING_GLOBE.KBCARTP CA
    ON CA.CASKUC = P1.P1CART AND CA.CACACT = P1.P1CACT

  WHERE NOT (PE.PET1PP = 0 OR (PE.PETSOL = '1' AND PE.PET1PP > 0))  -- exclude cancels
    AND SH.SHTTKP = 1                                               -- TK05 pack exists
    AND SH.SHTHMK <> 1

  GROUP BY
    '1.0', TRUNC(SH.SHDTKP),
    COALESCE(LPAD(P1.P1NANP::VARCHAR, 2, '0') || '/' || LPAD(P1.P1NPRE::VARCHAR, 9, '0'), ' '),
    COALESCE(LPAD(VS.CLNANP::VARCHAR, 2, '0') || '/' || LPAD(VS.CLNPRE::VARCHAR, 9, '0'), ' '),
    VS.CLRCDE, VS.VAS_CLUSTER,
    CASE 
      WHEN CA.CABRDC = '12' THEN 'GG'
      WHEN CA.CABRDC = '13' THEN 'BV'
      WHEN CA.CABRDC = '18' THEN 'BAL'
      WHEN CA.CABRDC = '14' THEN 'YSL'
      WHEN CA.CABRDC = '15' THEN 'AMQ' 
      ELSE TO_CHAR(CA.CABRDC)
    END,
    COALESCE(P1.P1CPRP, ' '),
    COALESCE(P1.P1CQAL, ' '),
    P1.P1CDPO, P1.P1CACT, P1.P1NANP, P1.P1NPRE,
    VS.VAS_CODE
),

/*-----------------------------------------------------------------------
RANGE_FILTER
- Final guard on UPDATED_TS to enforce the window (or bypass).
-----------------------------------------------------------------------*/
RANGE_FILTER AS (
  SELECT b.*
  FROM BILLING_VAS_BASE b, RANGE_PARAMS p
  WHERE p.APPLY_RANGE = FALSE
     OR (b.UPDATED_TS >= p.START_TS AND b.UPDATED_TS < p.END_TS)
)

SELECT * FROM RANGE_FILTER;
--------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE SP_KER_BILLING_VAS_LOAD(SAFETY_HOURS INTEGER DEFAULT 4)
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN
  /* Incremental upsert from the view using UPDATED_TS with a safety window */
  MERGE INTO FACT_KER_BILLING_VAS t
  USING (
    SELECT *
    FROM   MODELS.KERING_GLOBE.CRT_BILLING_VAS
    WHERE  UPDATED_TS >= DATEADD(
             hour, - :SAFETY_HOURS,
             COALESCE(
               (SELECT LAST_UPDATE FROM OBJECT_RUN WHERE "OBJECT" = 'CRT_BILLING_VAS'),
               TO_TIMESTAMP_NTZ('1900-01-01 00:00:00')
             )
           )
  ) s
  ON (
       t.P1CDPO = s.P1CDPO
   AND t.P1CACT = s.P1CACT
   AND t.P1NANP = s.P1NANP
   AND t.P1NPRE = s.P1NPRE
   AND t.VAS_CODE = s.VAS_CODE
   AND t.ACTIVITY_DATE = s.ACTIVITY_DATE
  )

  WHEN MATCHED THEN UPDATE SET
      t.VERSION             = s.VERSION,
      t.QUANTITY_PRE        = s.QUANTITY_PRE,
      t.QUANTITY_FIX        = s.QUANTITY_FIX,
      t.PREPARATION_CHILD   = s.PREPARATION_CHILD,
      t.PREPARATION_MOTHER  = s.PREPARATION_MOTHER,
      t.SAP_ORDERID         = s.SAP_ORDERID,
      t.VAS_CLUSTER         = s.VAS_CLUSTER,
      t.BRAND               = s.BRAND,
      t.OWNER               = s.OWNER,
      t.GRADE               = s.GRADE,
      t.UPDATED_TS          = s.UPDATED_TS

  WHEN NOT MATCHED THEN INSERT (
      VERSION, QUANTITY_PRE, QUANTITY_FIX, ACTIVITY_DATE,
      PREPARATION_CHILD, PREPARATION_MOTHER,
      SAP_ORDERID, VAS_CLUSTER, BRAND, OWNER, GRADE,
      P1CDPO, P1CACT, P1NANP, P1NPRE, VAS_CODE, UPDATED_TS
  )
  VALUES (
      s.VERSION, s.QUANTITY_PRE, s.QUANTITY_FIX, s.ACTIVITY_DATE,
      s.PREPARATION_CHILD, s.PREPARATION_MOTHER,
      s.SAP_ORDERID, s.VAS_CLUSTER, s.BRAND, s.OWNER, s.GRADE,
      s.P1CDPO, s.P1CACT, s.P1NANP, s.P1NPRE, s.VAS_CODE, s.UPDATED_TS
  );

  /* Progress watermark in OBJECT_RUN for the object 'CRT_BILLING_VAS' */
  MERGE INTO OBJECT_RUN d
  USING (
    SELECT 'CRT_BILLING_VAS' AS OBJECT,
           MAX(UPDATED_TS)   AS LAST_UPDATE
    FROM   MODELS.KERING_GLOBE.CRT_BILLING_VAS
    WHERE  UPDATED_TS >= DATEADD(
             hour, - :SAFETY_HOURS,
             COALESCE(
               (SELECT LAST_UPDATE FROM OBJECT_RUN WHERE "OBJECT" = 'CRT_BILLING_VAS'),
               TO_TIMESTAMP_NTZ('1900-01-01 00:00:00')
             )
           )
  ) s
  ON d."OBJECT" = s.OBJECT
  WHEN MATCHED THEN UPDATE
    SET d.LAST_UPDATE = GREATEST(COALESCE(d.LAST_UPDATE, s.LAST_UPDATE), s.LAST_UPDATE)
  WHEN NOT MATCHED THEN INSERT ("OBJECT", LAST_UPDATE)
    VALUES (s.OBJECT, s.LAST_UPDATE);

  RETURN 'SP_KER_BILLING_VAS_LOAD completed';
END;
$$;
