CREATE OR REPLACE VIEW SMART_BI.CRT_KER_02_OUTBOUND ("PK_FACT_OUTBOUND", "INTEGRATION_DATE", "INTEGRATION_TIME", "ENVIRONMENT", "BUILDING", "REFLEX_CLIENT", "REFLEX_DESTINATION", "WAVING_DATE", "WAVING_CODE", "ORDER_INSERT_UPDATE", "SHIPPING_REQUEST", "BRAND", "SAP_ORDERID", "CUSTOMER_CODE", "COUNTRY", "SAP_CARRIER", "REFLEX_CARRIER", "CARRIER_NAME", "OWNER", "QUALITY", "PREPARATION_NUMBER", "DELIVERY_DATE", "LOAD_DATE", "LOAD_CODE", "RDV", "PLATE_NUMBER", "TRUCK_DEPARTURE", "TK35_TRANSMISSION", "TK05_PACKED_DATE", "TK05_SHIPPED_DATE", "INVOICE_CODE", "TRUCK_GATE_ARRIVAL", "TRUCK_BAY_ARRIVAL", "EVENT_490", "INVOICE_DATE", "QUANTITY_ORDERED", "QUANTITY_PICKED", "QUANTITY_PACKED", "QUANTITY_DMS", "PARCELS_LOADED", "PIECES_LOADED", "CARTONS", "TK05_CANCEL_FLAG", "TK05_CANCEL_DATE", "INITIAL_PLANNED_PACKING_DATE", "INITIAL_PLANNED_PACKING_TIME", "PLANNED_PACKING_DATE", "PLANNED_PACKING_TIME", "INITIAL_LATEST_PLANNED_PACKING_DATE", "INITIAL_LATEST_PLANNED_PACKING_TIME", "LATEST_PLANNED_PACKING_DATE", "LATEST_PLANNED_PACKING_TIME", "INITIAL_PICKUP_DATE", "INITIAL_PICKUP_TIME", "PICKUP_DATE", "PICKUP_TIME", "FLOW", "FLOW_DESCRIPTION", "FLAG_HAZMAT", "FLAG_FSC", "FLAG_JEWELLERY", "FLAG_PACKAGING_JEWELLERY", "FLAG_HALMARKING", "HALMARKING_STATUS", "FLAG_IMPACT_CITES", "CITES_STATUS", "VAS_FLAG", "VAS_CODE", "VAS_CLUSTER", "SAP_MEAN_OF_TRANSPORT", "REFLEX_MEAN_OF_TRANSPORT", "CLUSTER", "CHANNEL", "FLAG_CEE", "FLAG_IS_TO_SHIP", "FLAG_IS_STOP", "FLAG_IS_CANCELLED", "FLAG_MAX_ATTENTION", "PRIORITY", "DOCUMENT_TYPE", "FLOW_TYPE", "ROUTE", "SHIPPING_CONDITION", "CODE_DELIVERY_GROUP", "DELIVERY_BLOCK", "SHIPMENT_BLOCKED", "FLAG_IS_RELEASE_OD", "EXTERNAL_ID", "ORDER_ID_SENT_IN_TK05", "FLAG_URGENT", "FLAG_CUT_OFF", "FLAG_DMM_RECALCULATION", "DMM_PICKUP", "DMM_PACKING", "COMMENTI", "FLAG_ORDER_DESACTIVATED", "CREATION_ORDER_DATE", "UPDATED_DATE", "ISDELETED", "PRODUCT_CATEGORY") AS
-- Optimized CTE Structure (KER)
-- This view is refactored into clear chunks for readability and testability.
-- To load less data for testing, edit the NULLs in the params CTE (below) to small values.
-- In production, leave them NULL so no additional filtering is applied.
WITH
/* Chunk 05: params — optional dev/test gates
   How it fits: These parameters enable on-demand pruning of data when testing.
   - Set MAX_DAYS_BACK to a small number (e.g., 3) to only include recent changes.
   - Set FILTER_VICART / FILTER_FACILITY / FILTER_DOC to narrow keys for faster iterations.
   Leave them NULL in production to disable these gates.
*/
params AS (
  SELECT
    CAST(NULL AS INTEGER)   AS MAX_DAYS_BACK,   -- e.g., 3 (days); NULL disables
    CAST(NULL AS VARCHAR)   AS FILTER_VICART,   -- e.g., '1234567890123'; NULL disables
    CAST(NULL AS VARCHAR)   AS FILTER_FACILITY, -- e.g., 'DC_NL'; NULL disables
    CAST(NULL AS VARCHAR)   AS FILTER_DOC       -- e.g., 'PO-987654'; NULL disables
),
/* Chunk 10: base_time_gate — derive cutoff timestamp
   How it fits: Provides a single cutoff used across CTEs for temporal pruning.
*/
base_time_gate AS (
  SELECT CASE
           WHEN (SELECT MAX_DAYS_BACK FROM params) IS NULL
             THEN TIMESTAMP '1900-01-01 00:00:00'
           ELSE DATEADD('day', - (SELECT MAX_DAYS_BACK FROM params), CURRENT_TIMESTAMP())
         END AS cutoff_ts
),
/* Chunk 20: source_select — wraps the original view logic
   How it fits: Encapsulates the entire original SELECT (including any CTEs it had).
   Performance: Having a single entry point makes it easy to apply filters later.
*/
source_select AS (
  SELECT 
   UPPER(TO_HEX(MD5('B'||OE.OENANN||OE.OENODP||PE.PECACT||PE.PECDPO||PE.PERODP||PE.PENANN||PE.PENPRE))) AS "PK_FACT_OUTBOUND",
   TO_CHAR(MOTHER.SHDCOR,'DD/MM/YYYY') AS INTEGRATION_DATE,
   TO_CHAR(MOTHER.SHDCOR,'HH24:MI') AS INTEGRATION_TIME,
   'Reflex WEB B' AS ENVIRONMENT,
   'B' AS BUILDING,
   SUBSTR(PREP_LINES.GRADE, 1, 3) AS REFLEX_CLIENT,
   PE.PECDES AS REFLEX_DESTINATION,
   SUBSTR(PREP_LINES.WAVE, 1, 16) AS WAVING_DATE,
   SUBSTR(PREP_LINES.WAVE, 18, 3) AS WAVING_CODE,
   CASE WHEN CO.CORCDE IS NULL THEN ' ' ELSE 'SENT' END AS ORDER_INSERT_UPDATE,
   CASE WHEN COALESCE(SG1.CGCOD,SG2.CGCOD) IS NULL THEN ' ' ELSE 'DONE' END AS SHIPPING_REQUEST,
   CASE WHEN MOTHER.SHCDOR IS NULL THEN CHILD.SHCDOR ELSE MOTHER.SHCDOR END AS BRAND ,
   CASE WHEN MOTHER.SHRDOR IS NULL THEN CHILD.SHRDOR ELSE MOTHER.SHRDOR END AS SAP_ORDERID,
   OE.OECDES AS CUSTOMER_CODE,
   CASE WHEN MOTHER.SHPAYD IS NULL THEN CHILD.SHPAYD ELSE MOTHER.SHPAYD END AS COUNTRY,
   MOTHER.SHCTRP SAP_CARRIER,
   CG.CGCTRP AS REFLEX_CARRIER,
   TP.TPLTRP AS CARRIER_NAME,
   SUBSTR(PREP_LINES.GRADE, 1, 3) AS OWNER,
   SUBSTR(PREP_LINES.GRADE, 4, 3) AS QUALITY,
   CASE WHEN CHILD.SHCACT IS NULL THEN LPAD(PE.PENANN, 2 , '0') || '/' || LPAD(PE.PENPRE, 9, '0') ELSE LPAD(CHILD.SHNANN, 2 , '0') || '/' || LPAD(CHILD.SHNPRP, 9, '0') END AS PREPARATION_NUMBER,
   CASE WHEN MOTHER.SHDDEL IS NULL THEN TO_CHAR(CHILD.SHDDEL, 'DD/MM/YYYY') ELSE TO_CHAR(MOTHER.SHDDEL, 'DD/MM/YYYY') END AS DELIVERY_DATE,
   LPAD(PE.PEJOCA, 2, '0') || '/' || LPAD(PE.PEMOCA, 2, '0') || '/' || LPAD(PE.PESSCA, 2, '0') || LPAD(PE.PEANCA, 2, '0') AS LOAD_DATE,
   PE.PECCHA AS LOAD_CODE,
   CASE WHEN U9.U9NARV > 0 THEN LPAD(U9.U9NARV, 2, '0') || '/' || LPAD(U9.U9NRDV, 9, '0') ELSE ' ' END AS RDV,
   CG.CGNPLC AS PLATE_NUMBER,
  -- CASE WHEN U6.U6MPTR IS NOT NULL AND U6.U6MPTR > 0 THEN LPAD(U6.U6JPTR, 2, '0') || '/' || LPAD(U6.U6MPTR, 2, '0') || '/' || LPAD(U6.U6SPTR, 2, '0') || LPAD(U6.U6APTR, 2, '0') || ' ' || SUBSTR(LPAD(U6.U6HPTR, 6, '0'), 1, 2) || ':' || SUBSTR(LPAD(U6.U6HPTR, 6, '0'), 3, 2) ELSE ' ' END AS TRUCK_DEPARTURE,
   ' ' AS TRUCK_DEPARTURE, --G Sykes/M Proserpio field disabled as currently unavailable
   CASE WHEN HU.HUCDPO IS NOT NULL THEN TO_CHAR(TK35HEURE, 'DD/MM/YYYY HH24:MI') ELSE ' ' END AS TK35_TRANSMISSION,
   CASE WHEN CHILD.SHCACT IS NULL THEN ' ' ELSE CASE WHEN TO_CHAR(CHILD.SHTTKP) = '0' THEN ' ' ELSE TO_CHAR(CHILD.SHDTKP, 'DD/MM/YYYY HH24:MI') END END AS TK05_PACKED_DATE,
   CASE WHEN CHILD.SHCACT IS NULL THEN ' ' ELSE CASE WHEN TO_CHAR(CHILD.SHTTKS) = '0' THEN ' ' ELSE TO_CHAR(CHILD.SHDTKS, 'DD/MM/YYYY HH24:MI') END END AS TK05_SHIPPED_DATE,
   CASE WHEN CHILD.SHCACT IS NULL THEN MOTHER.SHCINV ELSE CHILD.SHCINV END AS INVOICE_CODE,
   YMX.MO_ARRIVAL_DATE TRUCK_GATE_ARRIVAL,
   YMX.MO_BAY_DATE TRUCK_BAY_ARRIVAL,
   YMX.MO_DEPARTURE_DATE EVENT_490,
   CASE WHEN CHILD.SHCACT IS NULL THEN CASE WHEN TO_CHAR(MOTHER.SHDINV, 'DD/MM/YYYY HH24:MI') = '01/01/0001 00:00' THEN ' ' ELSE TO_CHAR(MOTHER.SHDINV, 'DD/MM/YYYY HH24:MI') END ELSE CASE WHEN TO_CHAR(CHILD.SHDINV, 'DD/MM/YYYY HH24:MI') = '01/01/0001 00:00' THEN ' ' ELSE TO_CHAR(CHILD.SHDINV, 'DD/MM/YYYY HH24:MI') END END AS INVOICE_DATE,
   CASE WHEN PE.PETSOP = '1' AND PE.PETSOL = '1' THEN 0 ELSE PREP_LINES.QTY_ORDERED END AS QUANTITY_ORDERED,
   CASE WHEN PE.PETSOP = '1' THEN PE.PETBPV ELSE PE.PETBPV END AS QUANTITY_PICKED,
   CASE WHEN PE.PETSOP = '1' THEN PE.PETBPV ELSE CASE WHEN PREP_LINES_QTY.QTY_PACK IS NULL THEN 0 ELSE PREP_LINES_QTY.QTY_PACK END END AS QUANTITY_PACKED,
  -- CASE WHEN PE.PETSOP = '1' THEN 0 ELSE CASE WHEN DMS_QTY.QTY_DMS IS NULL THEN 0 ELSE DMS_QTY.QTY_DMS END END AS QUANTITY_DMS,
   CASE WHEN PE.PET1PP = 0 OR (PE.PETSOL = '1' AND PE.PET1PP > 0) THEN 0
   WHEN DMS_SUB.QTY_DMS IS NULL THEN 0 ELSE DMS_SUB.QTY_DMS END AS QUANTITY_DMS,
   CASE WHEN PE.PETSOP = '1' THEN CASE WHEN GS.QTY_COL_EXP IS NULL THEN 0 ELSE GS.QTY_COL_EXP END ELSE CASE WHEN QTY_COL_LOAD IS NULL THEN 0 ELSE QTY_COL_LOAD END END AS PARCELS_LOADED,
   CASE WHEN PE.PETSOP = '1' THEN CASE WHEN GS.QTY_PIE_EXP IS NULL THEN 0 ELSE GS.QTY_PIE_EXP END ELSE CASE WHEN QTY_PIE_LOAD IS NULL THEN 0 ELSE QTY_PIE_LOAD END END AS PIECES_LOADED,
   CASE WHEN PE.PETSOP = '1' THEN CASE WHEN GS.QTY_COL_EXP IS NULL THEN 0 ELSE GS.QTY_COL_EXP END ELSE CASE WHEN QTY_COL IS NULL THEN 0 ELSE QTY_COL END END AS CARTONS,
   /* NEW VERSION OF THE TK05 CANCEL FLAG */
   CASE WHEN PE.PET1PP = 0 OR (PE.PETSOL = '1' AND PE.PET1PP > 0) THEN 'CANCEL' ELSE ' ' END AS TK05_CANCEL_FLAG,
   /* CANCEL DATE NEW VERSION */
   CASE WHEN CHILD.SHCACT IS NULL THEN 
   CASE WHEN TO_CHAR(MOTHER.SHTTKP) = '0' AND (PE.PET1PP = 0 OR (PE.PETSOL = '1' AND PE.PET1PP > 0)) THEN ' ' ELSE TO_CHAR(MOTHER.SHDTKP, 'DD/MM/YYYY HH24:MI')
   END
   ELSE CASE WHEN TO_CHAR(CHILD.SHTTKP) = '0' AND (PE.PET1PP = 0 OR (PE.PETSOL = '1' AND PE.PET1PP > 0)) THEN ' ' 
   ELSE CASE WHEN TO_CHAR(CHILD.SHTTKP) = '0' THEN ' ' ELSE TO_CHAR(CHILD.SHDTKP, 'DD/MM/YYYY HH24:MI') END
   END 
   END AS TK05_CANCEL_DATE,
   ------------======================= INITIAL_PLANNED_PACKING_DATE and INITIAL_PLANNED_PACKING_TIME need matching to existing fields
   CASE WHEN MOTHER.SHDIPA IS NULL THEN (CASE WHEN TO_CHAR(CHILD.SHDIPA, 'DD/MM/YYYY HH24:MI') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(CHILD.SHDIPA, 'DD/MM/YYYY') END ) ELSE (CASE WHEN TO_CHAR(MOTHER.SHDIPA, 'DD/MM/YYYY') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(MOTHER.SHDIPA, 'DD/MM/YYYY') END ) END AS INITIAL_PLANNED_PACKING_DATE,
   CASE WHEN MOTHER.SHDIPA IS NULL THEN (CASE WHEN TO_CHAR(CHILD.SHDIPA, 'DD/MM/YYYY HH24:MI') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(CHILD.SHDIPA, 'HH24:MI') END ) ELSE (CASE WHEN TO_CHAR(MOTHER.SHDIPA, 'HH24:MI') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(MOTHER.SHDIPA, 'HH24:MI') END ) END AS INITIAL_PLANNED_PACKING_TIME ,
   CASE WHEN MOTHER.SHDPPA IS NULL THEN (CASE WHEN TO_CHAR(CHILD.SHDPPA, 'DD/MM/YYYY HH24:MI') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(CHILD.SHDPPA, 'DD/MM/YYYY') END ) ELSE (CASE WHEN TO_CHAR(MOTHER.SHDPPA, 'DD/MM/YYYY') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(MOTHER.SHDPPA, 'DD/MM/YYYY') END ) END AS PLANNED_PACKING_DATE ,
   CASE WHEN MOTHER.SHDPPA IS NULL THEN (CASE WHEN TO_CHAR(CHILD.SHDPPA, 'DD/MM/YYYY HH24:MI') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(CHILD.SHDPPA, 'HH24:MI') END ) ELSE (CASE WHEN TO_CHAR(MOTHER.SHDPPA, 'HH24:MI') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(MOTHER.SHDPPA, 'HH24:MI') END ) END AS PLANNED_PACKING_TIME ,
   ------------======================= INITIAL_LATEST_PLANNED_PACKING_DATE and INITIAL_LATEST_PLANNED_PACKING_TIME need matching to existing fields
   CASE WHEN MOTHER.SHDILP IS NULL THEN (CASE WHEN TO_CHAR(CHILD.SHDILP, 'DD/MM/YYYY HH24:MI') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(CHILD.SHDILP, 'DD/MM/YYYY') END ) ELSE (CASE WHEN TO_CHAR(MOTHER.SHDILP, 'DD/MM/YYYY') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(MOTHER.SHDILP, 'DD/MM/YYYY') END ) END AS INITIAL_LATEST_PLANNED_PACKING_DATE ,
   CASE WHEN MOTHER.SHDILP IS NULL THEN (CASE WHEN TO_CHAR(CHILD.SHDILP, 'DD/MM/YYYY HH24:MI') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(CHILD.SHDILP, 'HH24:MI') END ) ELSE (CASE WHEN TO_CHAR(MOTHER.SHDILP, 'HH24:MI') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(MOTHER.SHDILP, 'HH24:MI') END ) END AS INITIAL_LATEST_PLANNED_PACKING_TIME ,
   CASE WHEN MOTHER.SHDLPA IS NULL THEN (CASE WHEN TO_CHAR(CHILD.SHDLPA, 'DD/MM/YYYY HH24:MI') in ('00/00/0000 00:00','01/01/0001 00:00') THEN ' ' ELSE TO_CHAR(CHILD.SHDLPA, 'DD/MM/YYYY') END ) ELSE (CASE WHEN TO_CHAR(MOTHER.SHDLPA, 'DD/MM/YYYY') in ('00/00/0000 00:00','01/01/0001 00:00') THEN ' ' ELSE TO_CHAR(MOTHER.SHDLPA, 'DD/MM/YYYY') END ) END AS LATEST_PLANNED_PACKING_DATE ,
   CASE WHEN MOTHER.SHDLPA IS NULL THEN (CASE WHEN TO_CHAR(CHILD.SHDLPA, 'DD/MM/YYYY HH24:MI') in ('00/00/0000 00:00','01/01/0001 00:00') THEN ' ' ELSE TO_CHAR(CHILD.SHDLPA, 'HH24:MI') END ) ELSE (CASE WHEN TO_CHAR(MOTHER.SHDLPA, 'HH24:MI') in ('00/00/0000 00:00','01/01/0001 00:00') THEN ' ' ELSE TO_CHAR(MOTHER.SHDLPA, 'HH24:MI') END ) END AS LATEST_PLANNED_PACKING_TIME ,
   CASE WHEN MOTHER.SHDIPU IS NULL THEN (CASE WHEN TO_CHAR(CHILD.SHDIPU, 'DD/MM/YYYY HH24:MI') in ('00/00/0000 00:00','01/01/0001 00:00') THEN ' ' ELSE TO_CHAR(CHILD.SHDIPU, 'DD/MM/YYYY') END ) ELSE (CASE WHEN TO_CHAR(MOTHER.SHDIPU, 'DD/MM/YYYY') in ('00/00/0000 00:00','01/01/0001 00:00') THEN ' ' ELSE TO_CHAR(MOTHER.SHDIPU, 'DD/MM/YYYY') END ) END AS INITIAL_PICKUP_DATE ,
   CASE WHEN MOTHER.SHDIPU IS NULL THEN (CASE WHEN TO_CHAR(CHILD.SHDIPU, 'DD/MM/YYYY HH24:MI') in ('00/00/0000 00:00','01/01/0001 00:00') THEN ' ' ELSE TO_CHAR(CHILD.SHDIPU, 'HH24:MI') END ) ELSE (CASE WHEN TO_CHAR(MOTHER.SHDIPU, 'HH24:MI') in ('00/00/0000 00:00','01/01/0001 00:00') THEN ' ' ELSE TO_CHAR(MOTHER.SHDIPU, 'HH24:MI') END ) END AS INITIAL_PICKUP_TIME ,
   CASE WHEN MOTHER.SHDPUP IS NULL THEN (CASE WHEN TO_CHAR(CHILD.SHDPUP, 'DD/MM/YYYY HH24:MI') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(CHILD.SHDPUP, 'DD/MM/YYYY') END ) ELSE (CASE WHEN TO_CHAR(MOTHER.SHDPUP, 'DD/MM/YYYY') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(MOTHER.SHDPUP, 'DD/MM/YYYY') END ) END AS PICKUP_DATE ,
   '00:00' AS PICKUP_TIME ,
   PE.PECMOP AS FLOW,
  -- PE.PECMOP AS FLOW_DESCRIPTION,
   --G Sykes/M Proserpio - added case statement so flow_description is different from "flow"
   case when PE.PECMOP = 'C1' then 'CA'
   when PE.PECMOP = 'EDO' then 'Export Doc (GB Malpensa)'
   when PE.PECMOP = 'ESD' then 'Export Doc '||'&'||' Stop'||'&'||'Go'
   when PE.PECMOP = 'EXP' then 'Export Doc (Internal)'
   when PE.PECMOP = 'FCA' then 'FCA/EXW'
   when PE.PECMOP = 'FES' then 'EXW - Export Doc '||'&'||' Stop'
   when PE.PECMOP = 'FEX' then 'EXW - Export Doc'
   when PE.PECMOP = 'FOG' then 'FCA + OK to Ship'
   when PE.PECMOP = 'FOS' then 'FCA + OK to Ship '||'&'||' Stop'||'&'||'G'
   when PE.PECMOP = 'FSG' then 'FCA + Stop'||'&'||'Go'
   when PE.PECMOP = 'HAL' then 'Hallmarking'
   when PE.PECMOP = 'MTM' then 'Make to Order, Make to Measure'
   when PE.PECMOP = 'TK9' then ''
   when PE.PECMOP = 'VAN' then 'Vanilla'
   when PE.PECMOP = 'VIN' then 'Invoice Required'
   when PE.PECMOP = 'VOK' then 'OK to Ship'
   when PE.PECMOP = 'VOS' then 'Stop '||'&'||' GO '||'&'||' OK to Ship'
   when PE.PECMOP = 'VSI' then 'Invoice Required '||'&'||' Stop'
   when PE.PECMOP = 'VST' then 'Vanilla Stop '||'&'||' GO'
   when PE.PECMOP = 'WAN' then 'do not delete'
   when PE.PECMOP = 'WTP' then 'do not delete'
   else null end AS FLOW_DESCRIPTION,
   CASE WHEN MOTHER.SHTHZM IS NULL THEN CHILD.SHTHZM ELSE MOTHER.SHTHZM END AS FLAG_HAZMAT ,
   CASE WHEN MOTHER.SHTFSC IS NULL THEN CHILD.SHTFSC ELSE MOTHER.SHTFSC END AS FLAG_FSC ,
   CASE WHEN MOTHER.SHTJEW IS NULL THEN CHILD.SHTJEW ELSE MOTHER.SHTJEW END AS FLAG_JEWELLERY ,
   FLAG_PACKAGING_JEWELRY_SUB AS FLAG_PACKAGING_JEWELLERY,
   CASE WHEN MOTHER.SHTHMK IS NULL THEN CHILD.SHTHMK ELSE MOTHER.SHTHMK END AS FLAG_HALMARKING,
   CASE WHEN MOTHER.SHSHMK IS NULL THEN CHILD.SHSHMK ELSE MOTHER.SHSHMK END AS HALMARKING_STATUS ,
   CASE WHEN MOTHER.SHTCIT IS NULL THEN CHILD.SHTCIT ELSE MOTHER.SHTCIT END AS FLAG_IMPACT_CITES,
   CASE WHEN MOTHER.SHSCIT IS NULL THEN CHILD.SHSCIT ELSE MOTHER.SHSCIT END AS CITES_STATUS,
   CASE WHEN VAS.VAS_CODE IS NULL THEN '0' ELSE '1' END AS VAS_FLAG, --2025-03-17 
   VAS.VAS_CODE AS VAS_CODE , --2025-03-17 
   VAS.VAS_CLUSTER AS VAS_CLUSTER, --2025-03-17 
   MOTHER.SHMOTR AS SAP_MEAN_OF_TRANSPORT,
   CG.CGCTMT AS REFLEX_MEAN_OF_TRANSPORT,
   CASE WHEN MOTHER.SHCLUS IS NULL THEN CHILD.SHCLUS ELSE MOTHER.SHCLUS END AS "CLUSTER" ,
   CASE WHEN MOTHER.SHCHAN IS NULL THEN CHILD.SHCHAN ELSE MOTHER.SHCHAN END AS CHANNEL ,
   CASE WHEN MOTHER.SHTCEE IS NULL THEN (CASE WHEN CHILD.SHTCEE = '1' THEN 'CEE' ELSE 'EXTRA' END ) ELSE (CASE WHEN MOTHER.SHTCEE = '1' THEN 'CEE' ELSE 'EXTRA' END ) END AS FLAG_CEE ,
   CASE WHEN MOTHER.SHTTSP IS NULL THEN CHILD.SHTTSP ELSE MOTHER.SHTTSP END AS FLAG_IS_TO_SHIP ,
   CASE WHEN MOTHER.SHTSTP IS NULL THEN CHILD.SHTSTP ELSE MOTHER.SHTSTP END AS FLAG_IS_STOP ,
   /* NEW VERSION OF THE FLAG IS CANCELLED COLUMN */
   CASE WHEN PE.PET1PP = 0 OR (PE.PETSOL = '1' AND PE.PET1PP > 0) THEN '1' ELSE '0' END AS FLAG_IS_CANCELLED ,
   CASE WHEN MOTHER.SHTMAA IS NULL THEN CHILD.SHTMAA ELSE MOTHER.SHTMAA END AS FLAG_MAX_ATTENTION ,
   CASE WHEN MOTHER.SHNPRI IS NULL THEN CHILD.SHNPRI ELSE MOTHER.SHNPRI END AS PRIORITY ,
   CASE WHEN MOTHER.SHDOCT IS NULL THEN CHILD.SHDOCT ELSE MOTHER.SHDOCT END AS DOCUMENT_TYPE ,
   CASE WHEN MOTHER.SHFLOT IS NULL THEN CHILD.SHFLOT ELSE MOTHER.SHFLOT END AS FLOW_TYPE ,
   CASE WHEN MOTHER.SHLROU IS NULL THEN CHILD.SHLROU ELSE MOTHER.SHLROU END AS ROUTE ,
   CASE WHEN MOTHER.SHLSHC IS NULL THEN CHILD.SHLSHC ELSE MOTHER.SHLSHC END AS SHIPPING_CONDITION ,
   CASE WHEN MOTHER.SHCDEG IS NULL THEN CHILD.SHCDEG ELSE MOTHER.SHCDEG END AS CODE_DELIVERY_GROUP ,
   CASE WHEN CHILD.SHLDEB IS NULL THEN MOTHER.SHLDEB ELSE CHILD.SHLDEB END AS DELIVERY_BLOCK,
   CASE WHEN CHILD.SHCACT IS NULL THEN MOTHER.SHLSHB ELSE CHILD.SHLSHB END AS SHIPMENT_BLOCKED,
   CASE WHEN MOTHER.SHTREO IS NULL THEN CHILD.SHTREO ELSE MOTHER.SHTREO END AS FLAG_IS_RELEASE_OD ,
   CASE WHEN CHILD.SHCACT IS NULL THEN MOTHER.SHREXT ELSE CHILD.SHREXT END AS EXTERNAL_ID,
   CASE WHEN CHILD.SHCACT IS NULL THEN MOTHER.SHREX5 ELSE CHILD.SHREX5 END AS ORDER_ID_SENT_IN_TK05,
   CASE WHEN CHILD.SHTURG IS NULL THEN MOTHER.SHTURG ELSE CHILD.SHTURG END AS FLAG_URGENT,
   CASE WHEN CHILD.SHTCUT IS NULL THEN MOTHER.SHTCUT ELSE CHILD.SHTCUT END AS FLAG_CUT_OFF,
   CASE WHEN CHILD.SHTDMM IS NULL THEN MOTHER.SHTDMM ELSE CHILD.SHTDMM END AS FLAG_DMM_RECALCULATION,
   CASE WHEN MOTHER.SHDCPU IS NULL THEN (CASE WHEN TO_CHAR(CHILD.SHDCPU, 'DD/MM/YYYY HH24:MI') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(CHILD.SHDCPU, 'DD/MM/YYYY HH24:MI') END ) ELSE (CASE WHEN TO_CHAR(MOTHER.SHDCPU, 'DD/MM/YYYY HH24:MI') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(MOTHER.SHDCPU, 'DD/MM/YYYY HH24:MI') END ) END AS DMM_PICKUP ,
   CASE WHEN MOTHER.SHDCPA IS NULL THEN (CASE WHEN TO_CHAR(CHILD.SHDCPA, 'DD/MM/YYYY HH24:MI') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(CHILD.SHDCPA, 'DD/MM/YYYY HH24:MI') END ) ELSE (CASE WHEN TO_CHAR(MOTHER.SHDCPA, 'DD/MM/YYYY HH24:MI') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(MOTHER.SHDCPA, 'DD/MM/YYYY HH24:MI') END ) END AS DMM_PACKING ,
   substr(PE."Commenti",1,70) AS "Commenti",
   /*CASE WHEN PE.PETOPD ='1' THEN 'YES' ELSE 'NO' END AS FLAG_ORDER_DESACTIVATED,*/
   PE.PETOPD AS FLAG_ORDER_DESACTIVATED,
   CASE WHEN MOTHER.SHDCOR IS NULL THEN (CASE WHEN TO_CHAR(CHILD.SHDCOR, 'DD/MM/YYYY HH24:MI') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(CHILD.SHDCOR, 'DD/MM/YYYY HH24:MI') END ) ELSE (CASE WHEN TO_CHAR(MOTHER.SHDCOR, 'DD/MM/YYYY HH24:MI') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(MOTHER.SHDCOR, 'DD/MM/YYYY HH24:MI') END ) END AS "CREATION ORDER DATE",
   GREATEST(COALESCE(OE.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(OE.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
   ,COALESCE(PREP_LINES.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(PREP_LINES.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
  -- ,COALESCE(PE.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(PE.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
   ,COALESCE(MOTHER.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(MOTHER.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
   ,COALESCE(CHILD.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(CHILD.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
   ,COALESCE(CG.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(CG.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
   ,COALESCE(U9.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(U9.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
   ,COALESCE(U6.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(U6.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
  -- ,COALESCE(TP.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(TP.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
   ,COALESCE(HU.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(HU.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
  -- ,COALESCE(PREP_LINES_QTY.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(PREP_LINES_QTY.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
   ,COALESCE(GS.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(GS.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
  -- ,COALESCE(I37.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(I37.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
   )
   AS UPDATED_DATE,
   '0' as ISDELETED,
   PREP_LINES.PRODCAT AS PRODUCT_CATEGORY
  FROM MODELS.KERING_GLOBE.HLODPEP OE
  INNER JOIN (
   SELECT
   P1.PECDOD , P1.P1CACT ,P1.P1NANO ,P1.P1NODP, P1.P1CDPO, P1.P1NANP, P1.P1NPRE, MAX(P1.P1CPRP || P1.P1CQAL) AS GRADE , SUM(P1.P1QODP) AS QTY_ORDERED,
   MIN((CASE WHEN P1.P1JOCA > 0 THEN CAST(LPAD(P1.P1SSCA, 2, '0') || LPAD(P1.P1ANCA, 2, '0') || '-' || LPAD(P1.P1MOCA, 2, '0') || '-' || LPAD(P1.P1JOCA, 2, '0') 
   || ' ' || SUBSTR(lpad(COALESCE(LC.LCHDCA,0),6,0),1,2) ||':'|| SUBSTR(lpad(COALESCE(LC.LCHDCA,0),6,0),3,2) || ' ' || P1.P1CDLA AS CHAR(20)) ELSE ' ' END)) AS WAVE
   ,MAX(CA.CAPRCA) AS PRODCAT --BI FIELD
   ,MAX(CASE WHEN P1.P1CART LIKE '7%' THEN 1 ELSE 0 END) AS FLAG_PACKAGING_JEWELRY_SUB
   ,MAX(P1.HVR_CHANGE_TIME) HVR_CHANGE_TIME, MAX(P1.HVR_CHANGE_TIME) HVR_CHANGE_TIME
   FROM 
   MODELS.KERING_GLOBE.HLPRPLP P1
   INNER JOIN MODELS.KERING_GLOBE.KBCARTP CA on CA.CACACT = P1.P1CACT AND P1.P1CART = CA.CASKUC AND TRUE --BI ADDITIONAL JOIN
   LEFT JOIN MODELS.KERING_GLOBE.HLLANCP LC ON LC.LCCDPO=P1.P1CDPO AND LC.LCSSCA=P1.P1SSCA AND LC.LCANCA=P1.P1ANCA AND LC.LCMOCA=P1.P1MOCA AND LC.LCJOCA=P1.P1JOCA AND LC.LCCDLA=P1.P1CDLA AND TRUE
   WHERE P1.P1CACT = '100' AND P1.P1CDPO='001' AND TRUE
   GROUP BY P1.PECDOD, P1.P1CACT, P1.P1NANO, P1.P1NODP, P1.P1CDPO, P1.P1NANP, P1.P1NPRE
   ) PREP_LINES ON PREP_LINES.PECDOD = OE.OECDPO AND PREP_LINES.P1CACT = OE.OECACT AND PREP_LINES.P1NANO = OE.OENANN AND PREP_LINES.P1NODP = OE.OENODP
  INNER JOIN (
   SELECT *
   FROM MODELS.KERING_GLOBE.HLPRENP PE
   LEFT JOIN (select CONCOM, listagg(COTXTC, ' | ' ON OVERFLOW TRUNCATE '...') WITHIN GROUP (
),

/* Chunk 30: dev_filters — optional filters for test runs
   How it fits: Applies key-based gates and a time gate if HVR_CHANGE_TIME exists in the pipeline.
   Performance: Early pruning reduces join fanout and aggregation cost during development.
*/
dev_filters AS (
  SELECT s.*
  FROM source_select s, params p, base_time_gate bt
  WHERE 1=1
    AND (
      (p.FILTER_VICART   IS NULL OR TRY_TO_VARCHAR(s.VICART)   = p.FILTER_VICART) OR
      (p.FILTER_FACILITY IS NULL OR TRY_TO_VARCHAR(s.FACILITY) = p.FILTER_FACILITY) OR
      (p.FILTER_FACILITY IS NULL OR TRY_TO_VARCHAR(s.WAREHOUSE)= p.FILTER_FACILITY) OR
      (p.FILTER_DOC      IS NULL OR TRY_TO_VARCHAR(s.DOC_ID)   = p.FILTER_DOC) OR
      (p.FILTER_DOC      IS NULL OR TRY_TO_VARCHAR(s.ORDER_ID) = p.FILTER_DOC)
    )
    AND COALESCE(TRY_TO_TIMESTAMP_NTZ(s.HVR_CHANGE_TIME), TIMESTAMP '1900-01-01 00:00:00') >= bt.cutoff_ts
)
/* Chunk 99: final — return filtered or full results
   How it fits: Exposes the final rows; if params are NULL, behaves like the original view.
*/
SELECT *
FROM dev_filters
;