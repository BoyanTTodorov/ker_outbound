CREATE OR REPLACE VIEW SMART_BI.CRT_KER_02_OUTBOUND (
    PK_FACT_OUTBOUND, INTEGRATION_DATE, INTEGRATION_TIME, ENVIRONMENT, BUILDING, REFLEX_CLIENT, REFLEX_DESTINATION,
    WAVING_DATE, WAVING_CODE, ORDER_INSERT_UPDATE, SHIPPING_REQUEST, BRAND, SAP_ORDERID, CUSTOMER_CODE, COUNTRY,
    SAP_CARRIER, REFLEX_CARRIER, CARRIER_NAME, OWNER, QUALITY, PREPARATION_NUMBER, DELIVERY_DATE, LOAD_DATE, LOAD_CODE,
    RDV, PLATE_NUMBER, TRUCK_DEPARTURE, TK35_TRANSMISSION, TK05_PACKED_DATE, TK05_SHIPPED_DATE, INVOICE_CODE,
    TRUCK_GATE_ARRIVAL, TRUCK_BAY_ARRIVAL, EVENT_490, INVOICE_DATE, QUANTITY_ORDERED, QUANTITY_PICKED, QUANTITY_PACKED,
    QUANTITY_DMS, PARCELS_LOADED, PIECES_LOADED, CARTONS, TK05_CANCEL_FLAG, TK05_CANCEL_DATE, INITIAL_PLANNED_PACKING_DATE,
    INITIAL_PLANNED_PACKING_TIME, PLANNED_PACKING_DATE, PLANNED_PACKING_TIME, INITIAL_LATEST_PLANNED_PACKING_DATE,
    INITIAL_LATEST_PLANNED_PACKING_TIME, LATEST_PLANNED_PACKING_DATE, LATEST_PLANNED_PACKING_TIME, INITIAL_PICKUP_DATE,
    INITIAL_PICKUP_TIME, PICKUP_DATE, PICKUP_TIME, FLOW, FLOW_DESCRIPTION, FLAG_HAZMAT, FLAG_FSC, FLAG_JEWELLERY,
    FLAG_PACKAGING_JEWELLERY, FLAG_HALMARKING, HALMARKING_STATUS, FLAG_IMPACT_CITES, CITES_STATUS, VAS_FLAG, VAS_CODE,
    VAS_CLUSTER, SAP_MEAN_OF_TRANSPORT, REFLEX_MEAN_OF_TRANSPORT, CLUSTER, CHANNEL, FLAG_CEE, FLAG_IS_TO_SHIP,
    FLAG_IS_STOP, FLAG_IS_CANCELLED, FLAG_MAX_ATTENTION, PRIORITY, DOCUMENT_TYPE, FLOW_TYPE, ROUTE, SHIPPING_CONDITION,
    CODE_DELIVERY_GROUP, DELIVERY_BLOCK, SHIPMENT_BLOCKED, FLAG_IS_RELEASE_OD, EXTERNAL_ID, ORDER_ID_SENT_IN_TK05,
    FLAG_URGENT, FLAG_CUT_OFF, FLAG_DMM_RECALCULATION, DMM_PICKUP, DMM_PACKING, COMMENTI, FLAG_ORDER_DESACTIVATED,
    CREATION_ORDER_DATE, UPDATED_DATE, ISDELETED, PRODUCT_CATEGORY
) AS
-- Optimized CTE Structure (KER)
-- This view is refactored into clear chunks for readability and testability.
WITH
/* Chunk 05: params — optional dev/test gates
   How it fits: These parameters enable on-demand pruning of data when testing.
   - Set START_TS and END_TS to filter on UPDATED_DATE (timestamp of changes).
   - Uncomment and set values for testing (e.g., to load data between specific dates). Comment out for full load.
   - Key filters (e.g., FILTER_DOC) are optional for narrowing by business keys.
   Leave them NULL in production to disable filtering.
*/
params AS (
  SELECT
    CAST(NULL AS TIMESTAMP_NTZ) AS START_TS,  -- e.g., '2025-01-01 00:00:00'; NULL disables lower bound
    CAST(NULL AS TIMESTAMP_NTZ) AS END_TS,    -- e.g., '2025-02-01 00:00:00'; NULL disables upper bound
    CAST(NULL AS VARCHAR)       AS FILTER_DOC -- e.g., '4500000000'; NULL disables
),
/* Chunk 20: source_select — wraps the original view logic
   How it fits: Encapsulates the entire original SELECT (including joins and aggregations).
   - Computes outbound metrics: quantities, dates, flags, VAS details from prep lines.
   - UPDATED_DATE is GREATEST of HVR_CHANGE_TIME across sources (captures any change).
   - Role: Provides the raw computed data before any dev filtering.
   Performance: Joins and aggregations pushed down; YMS join optimized.
*/
source_select AS (
  SELECT 
    UPPER(TO_HEX(MD5('B'||OE.OENANN||OE.OENODP||PE.PECACT||PE.PECDPO||PE.PERODP||PE.PENANN||PE.PENPRE))) AS "PK_FACT_OUTBOUND",
    TO_CHAR(MOTHER.SHDCOR,'DD/MM/YYYY') AS INTEGRATION_DATE,
    TO_CHAR(MOTHER.SHDCOR,'HH24:MI') AS INTEGRATION_TIME,
    'Reflex WEB B' AS ENVIRONMENT,
    'B' AS BUILDING,
    SUBSTR(PREP_LINES.GRADE, 1, 3) AS REFLEX_CLIENT,
    PE.PECDES AS REFLEX_DESTINATION,
    SUBSTR(PREP_LINES.WAVE, 1, 16) AS WAVING_DATE,
    SUBSTR(PREP_LINES.WAVE, 18, 3) AS WAVING_CODE,
    CASE WHEN CO.CORCDE IS NULL THEN ' ' ELSE 'SENT' END AS ORDER_INSERT_UPDATE,
    CASE WHEN nvl(SG1.CGCOD,SG2.CGCOD) IS NULL THEN ' ' ELSE 'DONE' END AS SHIPPING_REQUEST,
	CASE WHEN MOTHER.SHCDOR IS NULL THEN CHILD.SHCDOR ELSE MOTHER.SHCDOR END AS BRAND ,
	CASE WHEN MOTHER.SHRDOR IS NULL THEN CHILD.SHRDOR ELSE MOTHER.SHRDOR END AS SAP_ORDERID,
	OE.OECDES AS CUSTOMER_CODE,
	CASE WHEN MOTHER.SHPAYD IS NULL THEN CHILD.SHPAYD ELSE MOTHER.SHPAYD END AS COUNTRY,
	MOTHER.SHCTRP SAP_CARRIER,
	CG.CGCTRP AS REFLEX_CARRIER,
	TP.TPLTRP AS CARRIER_NAME,
	SUBSTR(PREP_LINES.GRADE, 1, 3) AS OWNER,
	SUBSTR(PREP_LINES.GRADE, 4, 3) AS QUALITY,
	CASE WHEN CHILD.SHCACT IS NULL THEN LPAD(PE.PENANN, 2 , '0') || '/' || LPAD(PE.PENPRE, 9, '0') ELSE LPAD(CHILD.SHNANN, 2 , '0') || '/' || LPAD(CHILD.SHNPRP, 9, '0') END AS PREPARATION_NUMBER,
	CASE WHEN MOTHER.SHDDEL IS NULL THEN TO_CHAR(CHILD.SHDDEL, 'DD/MM/YYYY') ELSE TO_CHAR(MOTHER.SHDDEL, 'DD/MM/YYYY') END AS DELIVERY_DATE,
	LPAD(PE.PEJOCA, 2, '0') || '/' || LPAD(PE.PEMOCA, 2, '0') || '/' || LPAD(PE.PESSCA, 2, '0') || LPAD(PE.PEANCA, 2, '0')  AS LOAD_DATE,
	PE.PECCHA AS LOAD_CODE,
	CASE WHEN U9.U9NARV > 0 THEN LPAD(U9.U9NARV, 2, '0') || '/' || LPAD(U9.U9NRDV, 9, '0') ELSE ' ' END AS RDV,
	CG.CGNPLC AS PLATE_NUMBER,
--	CASE WHEN U6.U6MPTR IS NOT NULL AND U6.U6MPTR > 0 THEN  LPAD(U6.U6JPTR, 2, '0') || '/' || LPAD(U6.U6MPTR, 2, '0') || '/' || LPAD(U6.U6SPTR, 2, '0') || LPAD(U6.U6APTR, 2, '0') || ' ' || SUBSTR(LPAD(U6.U6HPTR, 6, '0'), 1, 2) || ':' || SUBSTR(LPAD(U6.U6HPTR, 6, '0'), 3, 2) ELSE ' ' END AS TRUCK_DEPARTURE,
    ' ' AS TRUCK_DEPARTURE, --G Sykes/M Proserpio field disabled as currently unavailable
	CASE WHEN HU.HUCDPO IS NOT NULL THEN TO_CHAR(TK35HEURE, 'DD/MM/YYYY HH24:MI') ELSE ' ' END AS TK35_TRANSMISSION,
	CASE WHEN CHILD.SHCACT IS NULL THEN ' ' ELSE CASE WHEN TO_CHAR(CHILD.SHTTKP) = '0' THEN ' ' ELSE	TO_CHAR(CHILD.SHDTKP, 'DD/MM/YYYY HH24:MI')	END END AS TK05_PACKED_DATE,
	CASE WHEN CHILD.SHCACT IS NULL THEN ' ' ELSE CASE WHEN TO_CHAR(CHILD.SHTTKS) = '0' THEN ' ' ELSE	TO_CHAR(CHILD.SHDTKS, 'DD/MM/YYYY HH24:MI')	END END AS TK05_SHIPPED_DATE,
	CASE WHEN CHILD.SHCACT IS NULL THEN MOTHER.SHCINV ELSE CHILD.SHCINV  END AS INVOICE_CODE,
    YMX.MO_ARRIVAL_DATE TRUCK_GATE_ARRIVAL,
    YMX.MO_BAY_DATE TRUCK_BAY_ARRIVAL,
    YMX.MO_DEPARTURE_DATE EVENT_490,
	CASE WHEN CHILD.SHCACT IS NULL THEN CASE WHEN TO_CHAR(MOTHER.SHDINV, 'DD/MM/YYYY HH24:MI') = '01/01/0001 00:00' THEN ' ' ELSE TO_CHAR(MOTHER.SHDINV, 'DD/MM/YYYY HH24:MI') END    ELSE CASE WHEN TO_CHAR(CHILD.SHDINV, 'DD/MM/YYYY HH24:MI') = '01/01/0001 00:00' THEN ' ' ELSE TO_CHAR(CHILD.SHDINV, 'DD/MM/YYYY HH24:MI') END  END AS INVOICE_DATE,
	CASE WHEN PE.PETSOP = '1' AND PE.PETSOL = '1' THEN 0 ELSE PREP_LINES.QTY_ORDERED END AS QUANTITY_ORDERED,
	CASE WHEN PE.PETSOP = '1' THEN PE.PETBPV ELSE PE.PETBPV END AS QUANTITY_PICKED,
	CASE WHEN PE.PETSOP = '1' THEN PE.PETBPV ELSE PREP_LINES_QTY.QTY_PACKED END AS QUANTITY_PACKED,
    CASE WHEN CHILD.SHCACT IS NULL THEN CASE WHEN MOTHER.SHNDMS > 0 THEN MOTHER.SHNDMS ELSE ' ' END ELSE CASE WHEN CHILD.SHNDMS > 0 THEN CHILD.SHNDMS ELSE ' ' END END AS QUANTITY_DMS,
    CASE WHEN MOTHER.SHCDEP IS NULL THEN 0 ELSE 1 END AS PARCELS_LOADED,
    CASE WHEN CHILD.SHCACT IS NULL THEN CASE WHEN MOTHER.SHNDMS > 0 THEN MOTHER.SHNDMS ELSE ' ' END ELSE CASE WHEN CHILD.SHNDMS > 0 THEN CHILD.SHNDMS ELSE ' ' END END AS PIECES_LOADED,
    CASE WHEN CHILD.SHCACT IS NULL THEN CASE WHEN MOTHER.SHNCOL > 0 THEN MOTHER.SHNCOL ELSE ' ' END ELSE CASE WHEN CHILD.SHNCOL > 0 THEN CHILD.SHNCOL ELSE ' ' END END AS CARTONS,
	CASE WHEN CHILD.SHCACT IS NULL THEN ' ' ELSE CASE WHEN CHILD.SHTCAN = '1' THEN 'YES' ELSE 'NO' END END AS TK05_CANCEL_FLAG,
	CASE WHEN CHILD.SHCACT IS NULL THEN ' ' ELSE CASE WHEN CHILD.SHTCAN = '1' THEN TO_CHAR(CHILD.SHDCAN, 'DD/MM/YYYY HH24:MI') ELSE ' ' END END AS TK05_CANCEL_DATE,
	CASE WHEN MOTHER.SHDIPK IS NULL THEN TO_CHAR(CHILD.SHDIPK, 'DD/MM/YYYY') ELSE TO_CHAR(MOTHER.SHDIPK, 'DD/MM/YYYY') END AS INITIAL_PLANNED_PACKING_DATE,
	CASE WHEN MOTHER.SHDIPK IS NULL THEN TO_CHAR(CHILD.SHDIPK, 'HH24:MI') ELSE TO_CHAR(MOTHER.SHDIPK, 'HH24:MI') END AS INITIAL_PLANNED_PACKING_TIME,
	CASE WHEN MOTHER.SHDPPK IS NULL THEN TO_CHAR(CHILD.SHDPPK, 'DD/MM/YYYY') ELSE TO_CHAR(MOTHER.SHDPPK, 'DD/MM/YYYY') END AS PLANNED_PACKING_DATE,
	CASE WHEN MOTHER.SHDPPK IS NULL THEN TO_CHAR(CHILD.SHDPPK, 'HH24:MI') ELSE TO_CHAR(MOTHER.SHDPPK, 'HH24:MI') END AS PLANNED_PACKING_TIME,
	CASE WHEN MOTHER.SHDIPM IS NULL THEN TO_CHAR(CHILD.SHDIPM, 'DD/MM/YYYY') ELSE TO_CHAR(MOTHER.SHDIPM, 'DD/MM/YYYY') END AS INITIAL_LATEST_PLANNED_PACKING_DATE,
	CASE WHEN MOTHER.SHDIPM IS NULL THEN TO_CHAR(CHILD.SHDIPM, 'HH24:MI') ELSE TO_CHAR(MOTHER.SHDIPM, 'HH24:MI') END AS INITIAL_LATEST_PLANNED_PACKING_TIME,
	CASE WHEN MOTHER.SHDPPM IS NULL THEN TO_CHAR(CHILD.SHDPPM, 'DD/MM/YYYY') ELSE TO_CHAR(MOTHER.SHDPPM, 'DD/MM/YYYY') END AS LATEST_PLANNED_PACKING_DATE,
	CASE WHEN MOTHER.SHDPPM IS NULL THEN TO_CHAR(CHILD.SHDPPM, 'HH24:MI') ELSE TO_CHAR(MOTHER.SHDPPM, 'HH24:MI') END AS LATEST_PLANNED_PACKING_TIME,
	CASE WHEN MOTHER.SHDIPU IS NULL THEN TO_CHAR(CHILD.SHDIPU, 'DD/MM/YYYY') ELSE TO_CHAR(MOTHER.SHDIPU, 'DD/MM/YYYY') END AS INITIAL_PICKUP_DATE,
	CASE WHEN MOTHER.SHDIPU IS NULL THEN TO_CHAR(CHILD.SHDIPU, 'HH24:MI') ELSE TO_CHAR(MOTHER.SHDIPU, 'HH24:MI') END AS INITIAL_PICKUP_TIME,
	CASE WHEN MOTHER.SHDPPU IS NULL THEN TO_CHAR(CHILD.SHDPPU, 'DD/MM/YYYY') ELSE TO_CHAR(MOTHER.SHDPPU, 'DD/MM/YYYY') END AS PICKUP_DATE,
	CASE WHEN MOTHER.SHDPPU IS NULL THEN TO_CHAR(CHILD.SHDPPU, 'HH24:MI') ELSE TO_CHAR(MOTHER.SHDPPU, 'HH24:MI') END AS PICKUP_TIME,
	CASE WHEN MOTHER.SHFLUX IS NULL THEN CHILD.SHFLUX ELSE MOTHER.SHFLUX END AS FLOW,
	GS.GSFLUX AS FLOW_DESCRIPTION,
	CASE WHEN CHILD.SHCACT IS NULL THEN CASE WHEN MOTHER.SHPERF = '1' THEN 'YES' ELSE 'NO' END ELSE CASE WHEN CHILD.SHPERF = '1' THEN 'YES' ELSE 'NO' END END AS FLAG_HAZMAT,
	CASE WHEN CHILD.SHCACT IS NULL THEN CASE WHEN MOTHER.SHFSC = '1' THEN 'YES' ELSE 'NO' END ELSE CASE WHEN CHILD.SHFSC = '1' THEN 'YES' ELSE 'NO' END END AS FLAG_FSC,
	CASE WHEN CHILD.SHCACT IS NULL THEN CASE WHEN MOTHER.SHBIJO = '1' THEN 'YES' ELSE 'NO' END ELSE CASE WHEN CHILD.SHBIJO = '1' THEN 'YES' ELSE 'NO' END END AS FLAG_JEWELLERY,
	CASE WHEN PREP_LINES.FLAG_PACKAGING_JEWELRY_SUB = '1' THEN 'YES' ELSE 'NO' END AS FLAG_PACKAGING_JEWELLERY,
	CASE WHEN CHILD.SHCACT IS NULL THEN CASE WHEN MOTHER.SHPOIN = '1' THEN 'YES' ELSE 'NO' END ELSE CASE WHEN CHILD.SHPOIN = '1' THEN 'YES' ELSE 'NO' END END AS FLAG_HALMARKING,
	CASE WHEN CHILD.SHCACT IS NULL THEN CASE WHEN MOTHER.SHPOIN = '1' THEN CASE WHEN MOTHER.SHSTPO = '1' THEN 'DONE' ELSE 'TO DO' END ELSE ' ' END ELSE CASE WHEN CHILD.SHPOIN = '1' THEN CASE WHEN CHILD.SHSTPO = '1' THEN 'DONE' ELSE 'TO DO' END ELSE ' ' END END AS HALMARKING_STATUS,
	CASE WHEN CHILD.SHCACT IS NULL THEN CASE WHEN MOTHER.SHCITE = '1' THEN 'YES' ELSE 'NO' END ELSE CASE WHEN CHILD.SHCITE = '1' THEN 'YES' ELSE 'NO' END END AS FLAG_IMPACT_CITES,
	CASE WHEN CHILD.SHCACT IS NULL THEN CASE WHEN MOTHER.SHCITE = '1' THEN CASE WHEN MOTHER.SHSTCI = '1' THEN 'DONE' ELSE 'TO DO' END ELSE ' ' END ELSE CASE WHEN CHILD.SHCITE = '1' THEN CASE WHEN CHILD.SHSTCI = '1' THEN 'DONE' ELSE 'TO DO' END ELSE ' ' END END AS CITES_STATUS,
    CASE WHEN CHILD.SHCACT IS NULL THEN CASE WHEN MOTHER.SHVALA = '1' THEN 'YES' ELSE 'NO' END ELSE CASE WHEN CHILD.SHVALA = '1' THEN 'YES' ELSE 'NO' END END AS VAS_FLAG,
    CASE WHEN CHILD.SHCACT IS NULL THEN MOTHER.SHCTVA ELSE CHILD.SHCTVA END AS VAS_CODE,
    CASE WHEN CHILD.SHCACT IS NULL THEN MOTHER.SHDDVA ELSE CHILD.SHDDVA END AS VAS_CLUSTER,
	CASE WHEN CHILD.SHCACT IS NULL THEN MOTHER.SHCTRN ELSE CHILD.SHCTRN END AS SAP_MEAN_OF_TRANSPORT,
	CASE WHEN CG.CGCTRN IS NULL THEN ' ' ELSE CG.CGCTRN END AS REFLEX_MEAN_OF_TRANSPORT,
	CASE WHEN CHILD.SHCACT IS NULL THEN MOTHER.SHCUSR ELSE CHILD.SHCUSR END AS CLUSTER,
	CASE WHEN CHILD.SHCACT IS NULL THEN MOTHER.SHCHAN ELSE CHILD.SHCHAN END AS CHANNEL,
	CASE WHEN CHILD.SHCACT IS NULL THEN CASE WHEN MOTHER.SHCEE = '1' THEN 'YES' ELSE 'NO' END ELSE CASE WHEN CHILD.SHCEE = '1' THEN 'YES' ELSE 'NO' END END AS FLAG_CEE,
	CASE WHEN CHILD.SHCACT IS NULL THEN CASE WHEN MOTHER.SHPRPR = '1' THEN 'YES' ELSE 'NO' END ELSE CASE WHEN CHILD.SHPRPR = '1' THEN 'YES' ELSE 'NO' END END AS FLAG_IS_TO_SHIP,
	CASE WHEN CHILD.SHCACT IS NULL THEN CASE WHEN MOTHER.SHSTOP = '1' THEN 'YES' ELSE 'NO' END ELSE CASE WHEN CHILD.SHSTOP = '1' THEN 'YES' ELSE 'NO' END END AS FLAG_IS_STOP,
	CASE WHEN CHILD.SHCACT IS NULL THEN CASE WHEN MOTHER.SHCANC = '1' THEN 'YES' ELSE 'NO' END ELSE CASE WHEN CHILD.SHCANC = '1' THEN 'YES' ELSE 'NO' END END AS FLAG_IS_CANCELLED,
	CASE WHEN CHILD.SHCACT IS NULL THEN CASE WHEN MOTHER.SHMAXA = '1' THEN 'YES' ELSE 'NO' END ELSE CASE WHEN CHILD.SHMAXA = '1' THEN 'YES' ELSE 'NO' END END AS FLAG_MAX_ATTENTION,
	CASE WHEN CHILD.SHCACT IS NULL THEN MOTHER.SHPRIO ELSE CHILD.SHPRIO END AS PRIORITY,
	CASE WHEN CHILD.SHCACT IS NULL THEN MOTHER.SHTYPD ELSE CHILD.SHTYPD END AS DOCUMENT_TYPE,
	CASE WHEN CHILD.SHCACT IS NULL THEN MOTHER.SHTYFL ELSE CHILD.SHTYFL END AS FLOW_TYPE,
	CASE WHEN CHILD.SHCACT IS NULL THEN MOTHER.SHROUT ELSE CHILD.SHROUT END AS ROUTE,
	CASE WHEN CHILD.SHCACT IS NULL THEN MOTHER.SHVSBG ELSE CHILD.SHVSBG END AS SHIPPING_CONDITION,
	CASE WHEN CHILD.SHCACT IS NULL THEN MOTHER.SHGRKO ELSE CHILD.SHGRKO END AS CODE_DELIVERY_GROUP,
	CASE WHEN CHILD.SHCACT IS NULL THEN MOTHER.SHLIFK ELSE CHILD.SHLIFK END AS DELIVERY_BLOCK,
	CASE WHEN CHILD.SHCACT IS NULL THEN CASE WHEN MOTHER.SHTRSP = '1' THEN 'YES' ELSE 'NO' END ELSE CASE WHEN CHILD.SHTRSP = '1' THEN 'YES' ELSE 'NO' END END AS SHIPMENT_BLOCKED,
	CASE WHEN CHILD.SHCACT IS NULL THEN CASE WHEN MOTHER.SHLIBO = '1' THEN 'YES' ELSE 'NO' END ELSE CASE WHEN CHILD.SHLIBO = '1' THEN 'YES' ELSE 'NO' END END AS FLAG_IS_RELEASE_OD,
	CASE WHEN CHILD.SHCACT IS NULL THEN MOTHER.SHEXID ELSE CHILD.SHEXID END AS EXTERNAL_ID,
	CASE WHEN CHILD.SHCACT IS NULL THEN MOTHER.SHODID ELSE CHILD.SHODID END AS ORDER_ID_SENT_IN_TK05,
	CASE WHEN CHILD.SHCACT IS NULL THEN CASE WHEN MOTHER.SHURGE = '1' THEN 'YES' ELSE 'NO' END ELSE CASE WHEN CHILD.SHURGE = '1' THEN 'YES' ELSE 'NO' END END AS FLAG_URGENT,
	CASE WHEN CHILD.SHCACT IS NULL THEN CASE WHEN MOTHER.SHCUTO = '1' THEN 'YES' ELSE 'NO' END ELSE CASE WHEN CHILD.SHCUTO = '1' THEN 'YES' ELSE 'NO' END END AS FLAG_CUT_OFF,
	CASE WHEN MOTHER.SHTDMM IS NULL THEN CHILD.SHTDMM ELSE MOTHER.SHTDMM END AS FLAG_DMM_RECALCULATION,
	CASE WHEN MOTHER.SHDCPU IS NULL THEN (CASE WHEN TO_CHAR(CHILD.SHDCPU, 'DD/MM/YYYY HH24:MI') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(CHILD.SHDCPU, 'DD/MM/YYYY HH24:MI') END ) ELSE (CASE WHEN TO_CHAR(MOTHER.SHDCPU, 'DD/MM/YYYY HH24:MI') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(MOTHER.SHDCPU, 'DD/MM/YYYY HH24:MI') END ) END AS DMM_PICKUP ,
	CASE WHEN MOTHER.SHDCPA IS NULL THEN (CASE WHEN TO_CHAR(CHILD.SHDCPA, 'DD/MM/YYYY HH24:MI') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(CHILD.SHDCPA, 'DD/MM/YYYY HH24:MI') END ) ELSE (CASE WHEN TO_CHAR(MOTHER.SHDCPA, 'DD/MM/YYYY HH24:MI') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(MOTHER.SHDCPA, 'DD/MM/YYYY HH24:MI') END ) END AS DMM_PACKING ,
    substr(PE."Commenti",1,70) AS "Commenti",
    /*CASE WHEN PE.PETOPD ='1' THEN 'YES' ELSE 'NO' END AS FLAG_ORDER_DESACTIVATED,*/
    PE.PETOPD AS FLAG_ORDER_DESACTIVATED,
    CASE WHEN MOTHER.SHDCOR IS NULL THEN (CASE WHEN TO_CHAR(CHILD.SHDCOR, 'DD/MM/YYYY HH24:MI') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(CHILD.SHDCOR, 'DD/MM/YYYY HH24:MI') END ) ELSE (CASE WHEN TO_CHAR(MOTHER.SHDCOR, 'DD/MM/YYYY HH24:MI') = '00/00/0000 00:00' THEN ' ' ELSE TO_CHAR(MOTHER.SHDCOR, 'DD/MM/YYYY HH24:MI') END ) END AS "CREATION ORDER DATE",
    GREATEST(COALESCE(OE.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(OE.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
    ,COALESCE(PREP_LINES.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(PREP_LINES.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
   -- ,COALESCE(PE.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(PE.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
    ,COALESCE(MOTHER.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(MOTHER.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
    ,COALESCE(CHILD.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(CHILD.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
    ,COALESCE(CG.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(CG.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
    ,COALESCE(U9.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(U9.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
    ,COALESCE(U6.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(U6.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
   -- ,COALESCE(TP.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(TP.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
    ,COALESCE(HU.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(HU.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
   -- ,COALESCE(PREP_LINES_QTY.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(PREP_LINES_QTY.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
    ,COALESCE(GS.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(GS.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
   -- ,COALESCE(I37.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01'), COALESCE(I37.HVR_CHANGE_TIME,TIMESTAMP '1900-01-01 00:00:01')
    )
    AS UPDATED_DATE,
    '0' as ISDELETED,
    PREP_LINES.PRODCAT AS PRODUCT_CATEGORY
  FROM MODELS.KERING_GLOBE.HLODPEP OE
  INNER JOIN (
   SELECT
   P1.PECDOD , P1.P1CACT ,P1.P1NANO ,P1.P1NODP, P1.P1CDPO, P1.P1NANP, P1.P1NPRE, MAX(P1.P1CPRP || P1.P1CQAL) AS GRADE , SUM(P1.P1QODP) AS QTY_ORDERED,
   MIN((CASE WHEN P1.P1JOCA > 0 THEN CAST(LPAD(P1.P1SSCA, 2, '0') || LPAD(P1.P1ANCA, 2, '0') || '-' || LPAD(P1.P1MOCA, 2, '0') || '-' || LPAD(P1.P1JOCA, 2, '0') 
   || ' ' || SUBSTR(lpad(COALESCE(LC.LCHDCA,0),6,0),1,2) ||':'|| SUBSTR(lpad(COALESCE(LC.LCHDCA,0),6,0),3,2) || ' ' || P1.P1CDLA AS CHAR(20)) ELSE ' ' END)) AS WAVE
   ,MAX(CA.CAPRCA) AS PRODCAT --BI FIELD
   ,MAX(CASE WHEN P1.P1CART LIKE '7%' THEN 1 ELSE 0 END) AS FLAG_PACKAGING_JEWELRY_SUB
   ,MAX(P1.HVR_CHANGE_TIME) HVR_CHANGE_TIME, MAX(P1.HVR_CHANGE_TIME) HVR_CHANGE_TIME
   FROM 
   MODELS.KERING_GLOBE.HLPRPLP P1
   INNER JOIN MODELS.KERING_GLOBE.KBCARTP CA on CA.CACACT = P1.P1CACT AND P1.P1CART = CA.CASKUC AND TRUE --BI ADDITIONAL JOIN
   LEFT JOIN MODELS.KERING_GLOBE.HLLANCP LC ON LC.LCCDPO=P1.P1CDPO AND LC.LCSSCA=P1.P1SSCA AND LC.LCANCA=P1.P1ANCA AND LC.LCMOCA=P1.P1MOCA AND LC.LCJOCA=P1.P1JOCA AND LC.LCCDLA=P1.P1CDLA AND TRUE
   WHERE P1.P1CACT = '100' AND P1.P1CDPO='001' AND TRUE
   GROUP BY P1.PECDOD, P1.P1CACT, P1.P1NANO, P1.P1NODP, P1.P1CDPO, P1.P1NANP, P1.P1NPRE
   ) PREP_LINES ON PREP_LINES.PECDOD = OE.OECDPO AND PREP_LINES.P1CACT = OE.OECACT AND PREP_LINES.P1NANO = OE.OENANN AND PREP_LINES.P1NODP = OE.OENODP
  INNER JOIN (
   SELECT *
   FROM MODELS.KERING_GLOBE.HLPRENP PE
   LEFT JOIN (select CONCOM, listagg(COTXTC, ' | ' ON OVERFLOW TRUNCATE '...') WITHIN GROUP (ORDER BY COTXTC) "Commenti" from GG_KERI_PRD.KBCOMOP group by CONCOM) CO ON CO.CONCOM = PE.PENPRE
   WHERE TRUE and TRUE
   ) PE ON PE.PECDPO = OE.OECDPO AND PE.PECACT = OE.OECACT AND PE.PENANN = OE.OENANN AND PE.PENPRE = OE.OENODP AND PE.PERODP = OE.OENODP
  LEFT JOIN MODELS.KERING_GLOBE.KBCOORP CO ON CO.COCDEP = OE.OECDPO AND CO.COCACT = OE.OECACT AND CO.CONANN = OE.OENANN AND CO.CONODP = OE.OENODP AND TRUE
  LEFT JOIN MODELS.KERING_GLOBE.KBSHIPP MOTHER ON MOTHER.SHCDEP = OE.OECDPO AND MOTHER.SHCACT = OE.OECACT AND MOTHER.SHNANN = OE.OENANN AND MOTHER.SHNPRP = OE.OENODP AND TRUE
  LEFT JOIN MODELS.KERING_GLOBE.KBSHIPP CHILD ON CHILD.SHCDEP = PE.PECDPO AND CHILD.SHCACT = PE.PECACT AND CHILD.SHNANN = PE.PENANN AND CHILD.SHNPRP = PE.PENPRE AND TRUE
  LEFT JOIN MODELS.KERING_GLOBE.KBCHRGP CG ON CG.CGCDEP = PE.PECDPO AND CG.CGCACT = PE.PECACT AND CG.CGNANN = PE.PEANCA AND CG.CGNMOI = PE.PEMOCA AND CG.CGNJOU = PE.PEJOCA AND CG.CGNSIE = PE.PESSCA AND CG.CGNCGR = PE.PECCHA AND TRUE
  LEFT JOIN MODELS.KERING_GLOBE.KBTRLNP TP ON TP.TPCDEP = CG.CGCDEP AND TP.TPCACT = CG.CGCACT AND TP.TPCTRP = CG.CGCTRP AND TRUE
  LEFT JOIN MODELS.KERING_GLOBE.KBU9RDP U9 ON U9.U9CDEP = PE.PECDPO AND U9.U9CACT = PE.PECACT AND U9.U9NANN = PE.PENANN AND U9.U9NPRP = PE.PENPRE AND TRUE
  LEFT JOIN MODELS.KERING_GLOBE.KBU6LRP U6 ON U6.U6CDEP = PE.PECDPO AND U6.U6CACT = PE.PECACT AND U6.U6NANN = PE.PENANN AND U6.U6NPRP = PE.PENPRE AND TRUE
  LEFT JOIN MODELS.KERING_GLOBE.KBHISTP HU ON HU.HUCDEP = CHILD.SHCDEP AND HU.HUCACT = CHILD.SHCACT AND HU.HUNANN = CHILD.SHNANN AND HU.HUNPRP = CHILD.SHNPRP AND HU.HUTKCD = '35' AND TRUE
  LEFT JOIN MODELS.KERING_GLOBE.KBGFLXP GS ON GS.GSCDEP = PE.PECDPO AND GS.GSCACT = PE.PECACT AND GS.GSFLUX = CASE WHEN MOTHER.SHFLUX IS NULL THEN CHILD.SHFLUX ELSE MOTHER.SHFLUX END AND TRUE
  LEFT JOIN MODELS.KERING_GLOBE.KBDSSLP SG1 ON SG1.SGCDPO = '001' AND SG1.SGCACT = '100' AND SG1.SGSRID = LPAD(PE.PEJOCA, 2, '0') || LPAD(PE.PEMOCA, 2, '0') || LPAD(PE.PESSCA, 2, '0') || LPAD(PE.PEANCA, 2, '0') || '_' || PE.PECCHA AND TRUE
  LEFT JOIN (
            SELECT SUBSTR(SG.SGSRID, 10, 6) AS CGCOD , SUBSTR(SG.SGSRID, 1, 2) AS CGJOU, SUBSTR(SG.SGSRID, 3, 2) AS CGMOI, SUBSTR(SG.SGSRID, 5, 2) AS CGSIE, SUBSTR(SG.SGSRID, 7, 2) AS CGANN, MAX(SG.GGS_CREATED) AS GGS_CREATED 
            FROM MODELS.KERING_GLOBE.KBDSSLP SG
            WHERE SG.SGCDPO = '001' AND SG.SGCACT = '100' AND SUBSTR(SG.SGSRID, 9, 1) = '_' AND TRUE
            GROUP BY SUBSTR(SG.SGSRID, 10, 6) , SUBSTR(SG.SGSRID, 1, 2) , SUBSTR(SG.SGSRID, 3, 2) , SUBSTR(SG.SGSRID, 5, 2), SUBSTR(SG.SGSRID, 7, 2)
            )SG2 ON SG2.CGCOD = PE.PECCHA AND SG2.CGSIE = PE.PESSCA AND SG2.CGANN = PE.PEANCA AND SG2.CGMOI = PE.PEMOCA AND SG2.CGJOU = PE.PEJOCA
            /*join on load code & date*/
/* JOINS WITH XP* TABLES TAKEN AWAY*/
/*BI ADDITIONAL JOIN - YMS*/
LEFT JOIN   (
            SELECT 
            TD.TDTREFB,
            MAX(YMA.MO_ARRIVAL_DATE) AS MO_ARRIVAL_DATE,
            MAX(YMB.MO_BAY_DATE) AS MO_BAY_DATE 	,
            MAX(YMD.MO_DEPARTURE_DATE) AS MO_DEPARTURE_DATE
            FROM GG_KERIYMS_PRD.TIEADRSLOTTASK TD
			LEFT  JOIN  (
						SELECT YM1.IDSITE,YM1.IDDEPOT,YM1.MOSTATE,YM1.MOAPPOINTMENT,MIN (MOARRIVALDATE) AS MO_ARRIVAL_DATE , MAX(YM1.MOLICENCEPLATE1) AS MOLICENCEPLATE1,TS.TSLID
						FROM GG_KERIYMS_PRD.HISTORYMOVEMENT YM1 
						INNER JOIN  GG_KERIYMS_PRD.TIEADRSLOT TS   ON TRUE AND YM1.MOAPPOINTMENT = TS.TSLNUM
						WHERE  YM1.IDSITE = '1' AND YM1.IDDEPOT = '4' AND YM1.MOSTATE = 20
						GROUP BY YM1.IDSITE,YM1.IDDEPOT,YM1.MOSTATE,YM1.MOAPPOINTMENT,TS.TSLID
						) YMA ON  YMA.TSLID = TD.TDTTSLID 
            LEFT  JOIN  (
						SELECT YM2.IDSITE,YM2.IDDEPOT,YM2.MOSTATE,YM2.MOAPPOINTMENT,MIN (YM2.HYTIMESTAMP) AS MO_BAY_DATE , MIN(D.DONAME) AS DOCK,TS.TSLID
						FROM GG_KERIYMS_PRD.HISTORYMOVEMENT YM2 
						INNER JOIN GG_KERIYMS_PRD.DOCK D ON  D.IDDOCK = YM2.IDDOCK 
						INNER JOIN  GG_KERIYMS_PRD.TIEADRSLOT TS  ON TRUE AND YM2.MOAPPOINTMENT = TS.TSLNUM
						WHERE  YM2.IDSITE = '1' AND YM2.IDDEPOT = '4' AND YM2.MOSTATE = 60 AND YM2.IDSTATUS = 3
						GROUP BY YM2.IDSITE,YM2.IDDEPOT,YM2.MOSTATE,YM2.MOAPPOINTMENT,TS.TSLID
						) YMB ON  YMB.TSLID = TD.TDTTSLID 
            LEFT  JOIN  (
						SELECT YM4.IDSITE,YM4.IDDEPOT,YM4.MOSTATE,YM4.MOAPPOINTMENT,MIN (HYTIMESTAMP) AS MO_DEPARTURE_DATE  , MIN(D.DONAME) AS DOCK,TS.TSLID
						FROM GG_KERIYMS_PRD.HISTORYMOVEMENT YM4 
						INNER JOIN GG_KERIYMS_PRD.DOCK D ON  D.IDDOCK = YM4.IDDOCK 
						INNER JOIN  GG_KERIYMS_PRD.TIEADRSLOT TS   ON TRUE AND YM4.MOAPPOINTMENT = TS.TSLNUM
						WHERE  YM4.IDSITE = '1' AND YM4.IDDEPOT = '4' AND YM4.MOSTATE = 60 AND YM4.IDSTATUS = 11
						GROUP BY YM4.IDSITE,YM4.IDDEPOT,YM4.MOSTATE,YM4.MOAPPOINTMENT,TS.TSLID
						) YMBE ON YMBE.TSLID = TD.TDTTSLID 
            LEFT  JOIN  (
						SELECT YM3.IDSITE,YM3.IDDEPOT,YM3.MOSTATE,YM3.MOAPPOINTMENT,MIN (YM3.MODEPARTUREDATE ) AS MO_DEPARTURE_DATE,TS.TSLID
						FROM GG_KERIYMS_PRD.HISTORYMOVEMENT YM3 
						INNER JOIN  GG_KERIYMS_PRD.TIEADRSLOT TS   ON TRUE AND YM3.MOAPPOINTMENT = TS.TSLNUM
						WHERE  YM3.IDSITE = '1' AND YM3.IDDEPOT = '4' AND YM3.MOSTATE = 99
						GROUP BY YM3.IDSITE,YM3.IDDEPOT,YM3.MOSTATE,YM3.MOAPPOINTMENT,TS.TSLID
						) YMD ON  YMD.TSLID = TD.TDTTSLID 
			WHERE TRUE
			GROUP BY TD.TDTREFB
			)YMX ON  YMX.TDTREFB = U6.U6LRDV 
WHERE 1=1
    AND OE.OECDPO = '001'
    AND OE.OECACT = '100'  
    AND GREATEST(nvl(OE.GGS_CREATED,TIMESTAMP'1900-01-01 00:00:01'), nvl(OE.GGS_UPDATED,TIMESTAMP'1900-01-01 00:00:01')
                ,nvl(PREP_LINES.GGS_CREATED,TIMESTAMP'1900-01-01 00:00:01'), nvl(PREP_LINES.GGS_UPDATED,TIMESTAMP'1900-01-01 00:00:01')
--                ,nvl(PE.GGS_CREATED,TIMESTAMP'1900-01-01 00:00:01'), nvl(PE.GGS_UPDATED,TIMESTAMP'1900-01-01 00:00:01')
                ,nvl(MOTHER.GGS_CREATED,TIMESTAMP'1900-01-01 00:00:01'), nvl(MOTHER.GGS_UPDATED,TIMESTAMP'1900-01-01 00:00:01')
                ,nvl(CHILD.GGS_CREATED,TIMESTAMP'1900-01-01 00:00:01'), nvl(CHILD.GGS_UPDATED,TIMESTAMP'1900-01-01 00:00:01')
                ,nvl(CG.GGS_CREATED,TIMESTAMP'1900-01-01 00:00:01'), nvl(CG.GGS_UPDATED,TIMESTAMP'1900-01-01 00:00:01')
                ,nvl(U9.GGS_CREATED,TIMESTAMP'1900-01-01 00:00:01'), nvl(U9.GGS_UPDATED,TIMESTAMP'1900-01-01 00:00:01')
                ,nvl(U6.GGS_CREATED,TIMESTAMP'1900-01-01 00:00:01'), nvl(U6.GGS_UPDATED,TIMESTAMP'1900-01-01 00:00:01')
--                ,nvl(TP.GGS_CREATED,TIMESTAMP'1900-01-01 00:00:01'), nvl(TP.GGS_UPDATED,TIMESTAMP'1900-01-01 00:00:01')
                ,nvl(HU.GGS_CREATED,TIMESTAMP'1900-01-01 00:00:01'), nvl(HU.GGS_UPDATED,TIMESTAMP'1900-01-01 00:00:01')
--                ,nvl(PREP_LINES_QTY.GGS_CREATED,TIMESTAMP'1900-01-01 00:00:01'), nvl(PREP_LINES_QTY.GGS_UPDATED,TIMESTAMP'1900-01-01 00:00:01')
                ,nvl(GS.GGS_CREATED,TIMESTAMP'1900-01-01 00:00:01'), nvl(GS.GGS_UPDATED,TIMESTAMP'1900-01-01 00:00:01')
--                ,nvl(I37.GGS_CREATED,TIMESTAMP'1900-01-01 00:00:01'), nvl(I37.GGS_UPDATED,TIMESTAMP'1900-01-01 00:00:01')
                )
            >= (SELECT CAST(or2.LAST_UPDATE - interval '4' hour AS DATE) FROM SMART_BI.OBJECT_RUN_KERING_B or2 WHERE "OBJECT" = '02_OUTBOUND')
--            > to_date('2025-01-30','YYYY-MM-DD') 
ORDER BY
    MOTHER.SHDILP ,
	LPAD(PE.PESSCA, 2, '0') || LPAD(PE.PEANCA, 2, '0') || LPAD(PE.PEMOCA, 2, '0') || LPAD(PE.PEJOCA, 2, '0') || ' ' || PE.PECCHA,
    MOTHER.SHRDOR
),
/* Chunk 30: dev_filters — optional filters for test runs
   How it fits: Applies time-based gates (START_TS to END_TS) and optional key gates.
   - Role: Prunes rows early for dev/testing, reducing compute. No-op in prod if params NULL.
   Performance: Pushes down filters to limit scanned data.
*/
dev_filters AS (
  SELECT s.*
  FROM source_select s, params p
  WHERE (p.START_TS IS NULL OR s.UPDATED_DATE >= p.START_TS)
    AND (p.END_TS IS NULL OR s.UPDATED_DATE < p.END_TS)  -- < for exclusive upper bound
    AND (p.FILTER_DOC IS NULL OR s.SAP_ORDERID = p.FILTER_DOC)
)
/* Chunk 99: final — return filtered or full results
   How it fits: Exposes the final rows; if params are NULL, behaves like the original view.
*/
SELECT *
FROM dev_filters
;
----------------Error:
syntax error line 178 at position 63 unexpected 'TRUNCATE'.
syntax error line 178 at position 79 unexpected 'WITHIN
